DECLARE

  CURSOR CURSOR_LOJAS IS
    SELECT CD_LOJ, NM_LOJ FROM LOJA;
  LOJAS CURSOR_LOJAS%ROWTYPE;  
  
  
  CURSOR CURSOR_VENDAS(CODIGO_LOJA INT) IS
    SELECT CD_LOJ, CD_VEN, DT_VEN 
    FROM VENDA
    WHERE CD_LOJ = CODIGO_LOJA;
  VENDAS CURSOR_VENDAS%ROWTYPE;
  
  
  CURSOR CURSOR_PARCELAS(CODIGO_VENDA_P INT) IS
    SELECT COUNT(CD_PAR) AS QUANT
    FROM PARCELA
    WHERE CD_VEN = CODIGO_VENDA_P 
    AND VL_PAGO IS NULL 
    AND DT_VCTO < SYSDATE
    GROUP BY CD_VEN;
  PARCELAS CURSOR_PARCELAS%ROWTYPE;

  TOTAL_PARCELAS INT(11);

BEGIN

OPEN CURSOR_LOJAS;
FETCH CURSOR_LOJAS INTO LOJAS;

WHILE CURSOR_LOJAS%FOUND LOOP

  SELECT COUNT(*) INTO TOTAL_PARCELAS
  FROM PARCELA
  WHERE VL_PAGO IS NULL AND DT_VCTO < SYSDATE;

  DBMS_OUTPUT.PUT_LINE(''); 
  DBMS_OUTPUT.PUT_LINE('Nome da loja: ' || LOJAS.NM_LOJ);  
  
    -- VENDAS
    OPEN CURSOR_VENDAS(LOJAS.CD_LOJ);
    FETCH CURSOR_VENDAS INTO VENDAS;  
    
    WHILE CURSOR_VENDAS%FOUND LOOP
      DBMS_OUTPUT.PUT_LINE('     - VENDA ' || VENDAS.CD_VEN || ' - DATA DA VENDA: ' || VENDAS.DT_VEN);
            
      -- PARCELAS
      OPEN CURSOR_PARCELAS(VENDAS.CD_VEN);
      FETCH CURSOR_PARCELAS INTO PARCELAS;
      
      WHILE CURSOR_PARCELAS%FOUND LOOP
        DBMS_OUTPUT.PUT_LINE('                 - QUANT. PARCELAS: ' || PARCELAS.QUANT);
      
        IF PARCELAS.QUANT / TOTAL_PARCELAS > 0.5 THEN
          DBMS_OUTPUT.PUT_LINE('    #########  VENDA PROBLEMÁTICA!!   ########  ');
        END IF;
        
        FETCH CURSOR_PARCELAS INTO PARCELAS;
      END LOOP;
      CLOSE CURSOR_PARCELAS;
      -- FECHA PARCELAS
      
      
      
      FETCH CURSOR_VENDAS INTO VENDAS;
      DBMS_OUTPUT.PUT_LINE('');
    END LOOP;
    CLOSE CURSOR_VENDAS;
    -- FECHA CURSOR DE VENDAS
    
  FETCH CURSOR_LOJAS INTO LOJAS;
  DBMS_OUTPUT.PUT_LINE('');
END LOOP;
CLOSE CURSOR_LOJAS;

END;